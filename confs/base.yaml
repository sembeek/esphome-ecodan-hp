####################
# heatpump commands
number:
  - platform: template
    name: ${heatpump_number_set_dhw_temperature}
    id: heatpump_number_set_dhw_temperature
    entity_category: config
    optimistic: true
    min_value: 40
    max_value: 60
    step: 0.5
    mode: box
    icon: mdi:water-thermometer
    initial_value: 54
    restore_value: yes
    unit_of_measurement: Â°C
    set_action:
      then:
        - lambda: |-
            id(ecodan_instance).set_dhw_target_temperature(x);

switch:
  - platform: template
    name: ${heatpump_switch_force_dhw}
    id: heatpump_switch_force_dhw
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    turn_on_action:
      - lambda: |-
         id(ecodan_instance).set_dhw_force(true);
    turn_off_action:
      - lambda: |-
         id(ecodan_instance).set_dhw_force(false);

  - platform: template
    name: ${heatpump_switch_holiday}
    lambda: |-
      return id(status_holiday).state;
    id: heatpump_switch_holiday
    restore_mode: RESTORE_DEFAULT_OFF
    optimistic: true
    turn_on_action:
      - lambda: |-
         id(ecodan_instance).set_holiday(true);
    turn_off_action:
      - lambda: |-
         id(ecodan_instance).set_holiday(false);

  - platform: template
    name: ${heatpump_switch_power_mode}
    id: heatpump_switch_power_mode
    restore_mode: RESTORE_DEFAULT_ON
    optimistic: true
    turn_on_action:
      - lambda: |-
         id(ecodan_instance).set_power_mode(true);
    turn_off_action:
      - lambda: |-
         id(ecodan_instance).set_power_mode(false);

select:
  - platform: template
    name: ${heatpump_select_operating_mode}
    id: heatpump_select_operating_mode
    optimistic: true
    restore_value: true
    options:
      - ${heat_target_temperature}
      - ${heat_flow_temperature}
      - ${heat_compensation_curve}
      - ${cool_target_temperature}
      - ${cool_flow_temperature}
    set_action:
      - lambda: |-
          if (x == "${heat_target_temperature}") {
            id(ecodan_instance).set_hp_mode(static_cast<uint8_t>(esphome::ecodan::Status::HpMode::HEAT_ROOM_TEMP));
          }
          else if (x == "${heat_flow_temperature}") {
            id(ecodan_instance).set_hp_mode(static_cast<uint8_t>(esphome::ecodan::Status::HpMode::HEAT_FLOW_TEMP));
          }
          else if (x == "${heat_compensation_curve}") {
            id(ecodan_instance).set_hp_mode(static_cast<uint8_t>(esphome::ecodan::Status::HpMode::HEAT_COMPENSATION_CURVE));
          }
          else if (x == "${cool_target_temperature}") {
            id(ecodan_instance).set_hp_mode(static_cast<uint8_t>(esphome::ecodan::Status::HpMode::COOL_ROOM_TEMP));
          }
          else if (x == "${cool_flow_temperature}") {
            id(ecodan_instance).set_hp_mode(static_cast<uint8_t>(esphome::ecodan::Status::HpMode::COOL_FLOW_TEMP));
          }

  - platform: template
    name: ${heatpump_select_dhw_mode}
    id: heatpump_select_dhw_mode
    optimistic: true
    restore_value: true
    options:
      - ${of}
      - ${normal}
      - ${eco}
    set_action:
      - lambda: |-
          id(ecodan_instance).set_dhw_mode(x);

# diagnostics
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${esp_ip}
      icon: mdi:ip
    ssid:
      name: ${esp_sidd}
      icon: mdi:wifi

  - platform: version
    name: ${esp_version}
    hide_timestamp: true
    disabled_by_default: false
    icon: mdi:new-box
    entity_category: diagnostic

  - platform: template
    id: controller_version_text
    name: ${controller_version_text}
    icon: mdi:new-box
    entity_category: diagnostic
    lambda: |-
      int value = id(controller_version).state;
      switch (value) {
        case INT_MAX: return std::string("NA"); 
        case 0: return std::string("FTC2B");
        case 1: return std::string("FTC4");
        case 2: return std::string("FTC5");
        case 3: return std::string("FTC6");
        default: return std::to_string(value);
      }

  - platform: template
    id: heat_source_text
    name: ${heat_source_text}
    lambda: |-
      int value = id(heat_source).state;
      switch (value) {
        case INT_MAX: return std::string("NA");
        case 0: return std::string("${heatpump}");
        case 1: return std::string("${immersion_heater}");
        case 2: return std::string("${booster_heater}");
        case 3: return std::string("${immersion_and_booster_heater}");
        case 4: return std::string("${boiler}");
        default: return std::to_string(value);
      }  

  - platform: ecodan
    status_dhw:
      id: status_dhw 
      name: ${status_dhw}
      # on_value:
      #   if:
      #     condition:
      #       - lambda: |-
      #           return id(heatpump_select_dhw_mode).state != id(status_dhw).state && id(status_dhw).state != "Unknown";
      #     then:
      #       - select.set:
      #           id: heatpump_select_dhw_mode
      #           option: !lambda "return id(status_dhw).state;"


    status_heating_cooling:
      id: status_heating_cooling
      name: H/C status
      internal: true
      on_value:
        if:
          condition:
            - lambda: |-
                return id(heatpump_select_operating_mode).state != id(status_heating_cooling).state && id(status_heating_cooling).state != "Unknown";
          then:
            - select.set:
                id: heatpump_select_operating_mode
                option: !lambda "return id(status_heating_cooling).state;"

    status_power:
      internal: true
      id: status_power
      on_value:
        if:
          condition:
            and:
              - text_sensor.state:
                  id: status_power
                  state: 'On'
              - switch.is_off: heatpump_switch_power_mode
          then:
            - switch.turn_on:
                id: heatpump_switch_power_mode
          else:
            if:
              condition:
                and:
                  - text_sensor.state:
                      id: status_power
                      state: 'Off'
                  - switch.is_on: heatpump_switch_power_mode
              then:
                - switch.turn_off:
                    id: heatpump_switch_power_mode        
    status_operation:
      id: status_operation
      name: ${status_operation}
sensor:
  - platform: ecodan
    controller_version:
      id: controller_version
      internal: true
      entity_category: diagnostic
    heat_source:
      id: heat_source
      internal: true          
    runtime:
      name: ${runtime}
    compressor_frequency:
      id: compressor_frequency
      name: ${compressor_frequency}
    output_power:
      id: output_power
      name: ${output_power} 
    computed_output_power:
      id: computed_output_power
      name: ${computed_output_power}      
    outside_temp:
      id: outside_temp
      name: ${outside_temp}
    hp_feed_temp:
      id: hp_feed_temp
      name: ${hp_feed_temp}
    hp_return_temp:
      id: hp_return_temp
      name: ${hp_return_temp}
    hp_refrigerant_temp:
      id: hp_refrigerant_temp
      name: ${hp_refrigerant_temp}
    hp_refrigerant_condensing_temp:
      id: hp_refrigerant_condensing_temp
      name: ${hp_refrigerant_condensing_temp}
    boiler_flow_temp:
      id: boiler_flow_temp
      name: ${boiler_flow_temp}
    boiler_return_temp:
      id: boiler_return_temp
      name: ${boiler_return_temp}      
    dhw_temp:
      id: dhw_temp
      name: ${dhw_temp}
    dhw_secondary_temp:
      id: dhw_secondary_temp
      name: ${dhw_secondary_temp}
    dhw_flow_temp_target:
      name: ${dhw_flow_temp_target}
      id: dhw_flow_temp_target
      # on_value:
      #   if:
      #     condition:
      #       - lambda: |-
      #           return id(heatpump_number_set_dhw_temperature).state != id(dhw_flow_temp_target).state;
      #     then:
      #       - number.set:
      #           id: heatpump_number_set_dhw_temperature
      #           value: !lambda "return id(dhw_flow_temp_target).state;"
    dhw_flow_temp_drop:
      id: dhw_flow_temp_drop
      name: ${dhw_flow_temp_drop}      
    legionella_prevention_temp:
      id: legionella_prevention_temp
      name: ${legionella_prevention_temp}      
    flow_rate:
      id: flow_rate 
      name: ${flow_rate}      
    cool_cop:
      name: ${cool_cop}
    cool_consumed:
      name: ${cool_consumed}
    cool_delivered:
      name: ${cool_delivered}
    heating_cop:
      name: ${heating_cop}
    heating_consumed:
      name: ${heating_consumed}
    heating_delivered:
      name: ${heating_delivered}
    dhw_cop:
      name: ${dhw_cop}
    dhw_consumed:
      name: ${dhw_consumed}
    dhw_delivered:
      name: ${dhw_delivered}    

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: ${wifi_signal_db}
    id: wifi_signal_db
    update_interval: 3s
    entity_category: diagnostic

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: ${wifi_signal_proc}
    id: wifi_signal_proc
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: " %"
    entity_category: diagnostic
    device_class: ""
    icon: mdi:wifi

  - platform: uptime
    name: ${uptime}
    disabled_by_default: false
    force_update: false
    unit_of_measurement: s
    icon: mdi:timer-outline
    accuracy_decimals: 0
    device_class: duration
    state_class: total_increasing
    entity_category: diagnostic
    update_interval: 5s

  - platform: internal_temperature
    name: ${internal_esp_temperature}
    entity_category: diagnostic

binary_sensor:
  - platform: ecodan
    status_holiday:
      id: status_holiday
      name: ${status_holiday}
      on_state:
        if:
          condition:
            and:
              - binary_sensor.is_off: status_holiday
              - switch.is_on: heatpump_switch_holiday
          then:
            - switch.turn_off:
                id: heatpump_switch_holiday
          else:
            if:
              condition:
                and:
                  - binary_sensor.is_on: status_holiday
                  - switch.is_off: heatpump_switch_holiday
              then:
                - switch.turn_on:
                    id: heatpump_switch_holiday      
    status_dhw_forced:
      name: ${status_dhw_forced}
      id: status_dhw_forced
      on_state:
        if:
          condition:
            and:
              - binary_sensor.is_off: status_dhw_forced
              - switch.is_on: heatpump_switch_force_dhw
          then:
            - switch.turn_off:
                id: heatpump_switch_force_dhw
          else:
            if:
              condition:
                and:
                  - binary_sensor.is_on: status_dhw_forced
                  - switch.is_off: heatpump_switch_force_dhw
              then:
                - switch.turn_on:
                    id: heatpump_switch_force_dhw
    status_defrost:
      id: status_defrost
      name: ${status_defrost}
    status_booster:
      id: status_booster
      name: ${status_booster}
    status_immersion:
      id: status_immersion
      name: ${status_immersion}
    status_prohibit_dhw:
      id: status_prohibit_dhw
      name: ${status_prohibit_dhw}
    status_water_pump:
      id: status_water_pump
      name: ${status_water_pump}
    status_three_way_valve:
      id: status_three_way_valve
      name: ${status_three_way_valve}
    status_in1_request:
      id: status_in1_request
      name: ${status_in1_request}
    status_in6_request:
      id: status_in6_request
      name: ${status_in6_request}
    status_in5_request:
      id: status_in5_request
      name: ${status_in5_request}
