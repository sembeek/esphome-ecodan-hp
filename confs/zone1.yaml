binary_sensor:
  - platform: ecodan
    status_prohibit_heating_z1:
      id: status_prohibit_heating_z1
      name: ${status_prohibit_heating_z1}
    status_prohibit_cool_z1:
      id: status_prohibit_cool_z1
      name: ${status_prohibit_cool_z1}

number:
  - platform: template
    name: ${heatpump_number_z1_set_room_temperature}
    id: heatpump_number_z1_set_room_temperature
    entity_category: config
    optimistic: true
    min_value: 8
    max_value: 28
    step: 0.5
    initial_value: 20
    restore_value: yes
    mode: box
    unit_of_measurement: °C
    set_action:
      then:
        - lambda: |-
            id(ecodan_instance).set_room_temperature(x, esphome::ecodan::SetZone::ZONE_1);

  - platform: template
    name: ${heatpump_number_z1_set_flow_temperature}
    id: heatpump_number_z1_set_flow_temperature
    entity_category: config
    optimistic: true
    min_value: 5
    max_value: 60
    step: 0.5
    initial_value: 30
    restore_value: yes
    mode: box
    unit_of_measurement: °C
    set_action:
      then:
        - lambda: |-
            id(ecodan_instance).set_flow_target_temperature(x, esphome::ecodan::SetZone::ZONE_1);

sensor:
  - platform: ecodan
    z1_flow_temp_target:
      id: z1_flow_temp_target
      name: ${z1_flow_temp_target}
      # on_value:
      #   if:
      #     condition:
      #       - lambda: |-
      #           return id(heatpump_number_z1_set_flow_temperature).state != id(z1_flow_temp_target).state;
      #     then:
      #       - number.set:
      #           id: heatpump_number_z1_set_flow_temperature
      #           value: !lambda "return id(z1_flow_temp_target).state;"
    z1_room_temp:
      id: z1_room_temp
      name: ${z1_room_temp}      
    z1_room_temp_target:
      id: z1_room_temp_target
      name: ${z1_room_temp_target}
      # on_value:
      #   if:
      #     condition:
      #       - lambda: |-
      #           return id(heatpump_number_z1_set_room_temperature).state != id(z1_room_temp_target).state;
      #     then:
      #       - number.set:
      #           id: heatpump_number_z1_set_room_temperature
      #           value: !lambda "return id(z1_room_temp_target).state;"
